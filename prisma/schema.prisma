// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}
 
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String  @id @default(uuid())
  username String  @unique
  displayUsername String
  name     String?

  posts    Post[]
  likes    Like[]
  comments Comment[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String @unique
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  
}

model Post {
  id       String @id @default(uuid())
  title    String
  content  String
  url      String?
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  likes    Like[] 
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())

  // Ensures one like per user per post
  @@unique([userId, postId])
}

model Comment {
  id     String @id @default(uuid())
  text   String
  user   User   @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId String

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId String?
  replies  Comment[] @relation("CommentReplies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}
